From a51702f3f8da335f57425e184a5278016bb21731 Mon Sep 17 00:00:00 2001
From: Victor Morales <victor.morales@intel.com>
Date: Thu, 20 Aug 2015 15:02:36 -0500
Subject: [PATCH] Logging-patch

Signed-off-by: Victor Morales <victor.morales@intel.com>
---
 oslo_policy/policy.py | 31 +++++++++++++++++++++++++++----
 1 file changed, 27 insertions(+), 4 deletions(-)

diff --git a/oslo_policy/policy.py b/oslo_policy/policy.py
index 943a396..9669260 100644
--- a/oslo_policy/policy.py
+++ b/oslo_policy/policy.py
@@ -240,8 +240,10 @@ class Rules(dict):
         """Allow loading of JSON rule data."""
 
         # Suck in the JSON data and parse the rules
+        LOG.debug('0 Speedy Gonzalez')
         rules = dict((k, _parser.parse_rule(v)) for k, v in
                      jsonutils.loads(data).items())
+        LOG.debug('1 Speedy Gonzalez')
 
         return cls(rules, default_rule)
 
@@ -250,7 +252,9 @@ class Rules(dict):
         """Allow loading of rule data from a dictionary."""
 
         # Parse the rules stored in the dictionary
+        LOG.debug('0 Speedy Gonzalez')
         rules = dict((k, _parser.parse_rule(v)) for k, v in rules_dict.items())
+        LOG.debug('1 Speedy Gonzalez')
 
         return cls(rules, default_rule)
 
@@ -262,7 +266,7 @@ class Rules(dict):
 
     def __missing__(self, key):
         """Implements the default rule handling."""
-
+        LOG.debug('0 Speedy Gonzalez')
         if isinstance(self.default_rule, dict):
             raise KeyError(key)
 
@@ -279,12 +283,15 @@ class Rules(dict):
             raise KeyError(key)
 
         elif isinstance(self.default_rule, six.string_types):
+            LOG.debug('1 Speedy Gonzalez')
             return self[self.default_rule]
+        LOG.debug('1 Speedy Gonzalez')
 
     def __str__(self):
         """Dumps a string representation of the rules."""
 
         # Start by building the canonical strings for the rules
+        LOG.debug('0 Speedy Gonzalez')
         out_rules = {}
         for key, value in self.items():
             # Use empty string for singleton TrueCheck instances
@@ -294,6 +301,7 @@ class Rules(dict):
                 out_rules[key] = str(value)
 
         # Dump a pretty-printed JSON representation
+        LOG.debug('1 Speedy Gonzalez')
         return jsonutils.dumps(out_rules, indent=4)
 
 
@@ -341,7 +349,7 @@ class Enforcer(object):
                           with the new rules.
         :param use_conf: Whether to reload rules from cache or config file.
         """
-
+        LOG.debug('0 Speedy Gonzalez')
         if not isinstance(rules, dict):
             raise TypeError(_('Rules must be an instance of dict or Rules, '
                             'got %s instead') % type(rules))
@@ -350,15 +358,18 @@ class Enforcer(object):
             self.rules = Rules(rules, self.default_rule)
         else:
             self.rules.update(rules)
+        LOG.debug('1 Speedy Gonzalez')
 
     def clear(self):
         """Clears :class:`Enforcer` rules, policy's cache and policy's path."""
+        LOG.debug('0 Speedy Gonzalez')
         self.set_rules({})
         fileutils.delete_cached_file(self.policy_path)
         self.default_rule = None
         self.policy_path = None
         self._loaded_files = []
         self._policy_dir_mtimes = {}
+        LOG.debug('1 Speedy Gonzalez')
 
     def load_rules(self, force_reload=False):
         """Loads policy_path's rules.
@@ -368,6 +379,7 @@ class Enforcer(object):
         :param force_reload: Whether to reload rules from config file.
         """
 
+        LOG.debug('0 Speedy Gonzalez')
         if force_reload:
             self.use_conf = force_reload
 
@@ -387,12 +399,14 @@ class Enforcer(object):
                     self._walk_through_policy_directory(path,
                                                         self._load_policy_file,
                                                         force_reload, False)
+        LOG.debug('1 Speedy Gonzalez')
 
     @staticmethod
     def _is_directory_updated(cache, path):
         # Get the current modified time and compare it to what is in
         # the cache and check if the new mtime is greater than what
         # is in the cache
+        LOG.debug('0 Speedy Gonzalez')
         mtime = 0
         if os.path.exists(path):
             # Make a list of all the files
@@ -403,18 +417,23 @@ class Enforcer(object):
         cache_info = cache.setdefault(path, {})
         if mtime > cache_info.get('mtime', 0):
             cache_info['mtime'] = mtime
+            LOG.debug('1 Speedy Gonzalez')
             return True
+        LOG.debug('1 Speedy Gonzalez')
         return False
 
     @staticmethod
     def _walk_through_policy_directory(path, func, *args):
         # We do not iterate over sub-directories.
+        LOG.debug('0 Speedy Gonzalez')
         policy_files = next(os.walk(path))[2]
         policy_files.sort()
         for policy_file in [p for p in policy_files if not p.startswith('.')]:
             func(os.path.join(path, policy_file), *args)
+        LOG.debug('1 Speedy Gonzalez')
 
     def _load_policy_file(self, path, force_reload, overwrite=True):
+            LOG.debug('0 Speedy Gonzalez')
             reloaded, data = fileutils.read_cached_file(
                 path, force_reload=force_reload)
             if reloaded or not self.rules or not overwrite:
@@ -423,6 +442,7 @@ class Enforcer(object):
                 self._loaded_files.append(path)
                 LOG.debug('Reloaded policy file: %(path)s',
                           {'path': path})
+            LOG.debug('1 Speedy Gonzalez')
 
     def _get_policy_path(self, path):
         """Locate the policy JSON data file/path.
@@ -437,11 +457,13 @@ class Enforcer(object):
         :raises: ConfigFilesNotFoundError if the file/path couldn't
                  be located.
         """
+        LOG.debug('0 Speedy Gonzalez')
         policy_path = self.conf.find_file(path)
 
         if policy_path:
+            LOG.debug('1 Speedy Gonzalez')
             return policy_path
-
+        LOG.debug('1 Speedy Gonzalez')
         raise cfg.ConfigFilesNotFoundError((path,))
 
     def enforce(self, rule, target, creds, do_raise=False,
@@ -468,7 +490,7 @@ class Enforcer(object):
                  ``True`` value will be the specified string from the
                  expression.
         """
-
+        LOG.debug('0 Speedy Gonzalez')
         self.load_rules()
 
         # Allow the rule to be a Check tree
@@ -493,4 +515,5 @@ class Enforcer(object):
 
             raise PolicyNotAuthorized(rule, target, creds)
 
+        LOG.debug('1 Speedy Gonzalez')
         return result
-- 
2.1.0

